object Multiplicator /* Multiplicator#0 */ {
  def main() : Unit = {
    if ( new PaperMulti/**/().showMultiplication/**/ ( 12345, 9876 ) )
      {
        println( "Completed successfully!" );
      }
    else
      {
        println( "Fail.." );
      }
  }
}

class PaperMulti /* PaperMulti#1 */ {
  def showMultiplication /* showMultiplication#14 */ ( factor1 /* factor1#12 */ : Int, factor2 /* factor2#13 */ : Int ) : Bool = {
    var i /* i#2 */ /* i#2 */ : Int;
    var result /* result#3 */ /* result#3 */ : Int;
    var sum /* sum#4 */ /* sum#4 */ : Int;
    var tempResult /* tempResult#5 */ /* tempResult#5 */ : Int;
    var maxLength /* maxLength#6 */ /* maxLength#6 */ : Int;
    var factorArray1 /* factorArray1#7 */ /* factorArray1#7 */ : Int[ ];
    var factorArray2 /* factorArray2#8 */ /* factorArray2#8 */ : Int[ ];
    var aux /* aux#9 */ /* aux#9 */ : Int;
    var translate /* translate#10 */ /* translate#10 */ : Int;
    var initString /* initString#11 */ /* initString#11 */ : String;
    result/**/ = (factor1/**/ * factor2/**/);
    factorArray1/**/ = this/**/.separateFactor/**/ ( factor1/**/ );
    factorArray2/**/ = this/**/.separateFactor/**/ ( factor2/**/ );
    maxLength/**/ = this/**/.getNumberOfDigits/**/ ( result/**/ );
    i/**/ = 0;
    translate/**/ = 1;
    sum/**/ = 0;
    println( "" );
    println( "Multiplication by hand" );
    println( "**********************" );
    aux/**/ = this/**/.printNumber/**/ ( maxLength/**/, factor1/**/, " " );
    aux/**/ = this/**/.printNumber/**/ ( maxLength/**/, factor2/**/, "*" );
    aux/**/ = this/**/.printLine/**/ ( maxLength/**/ );
    while ( (i/**/ < factorArray2/**/.length) )
      {
        tempResult/**/ = 0;
        tempResult/**/ = ((factorArray2/**/ [ i/**/ ] * factor1/**/) * translate/**/);
        sum/**/ = (sum/**/ + tempResult/**/);
        if ( (i/**/ == 0) )
          initString/**/ = " ";
        else
          initString/**/ = "+";
        aux/**/ = this/**/.printNumber/**/ ( maxLength/**/, tempResult/**/, initString/**/ );
        i/**/ = (i/**/ + 1);
        translate/**/ = (translate/**/ * 10);
      }
    aux/**/ = this/**/.printLine/**/ ( maxLength/**/ );
    println( (" " + sum/**/) );
    println( "**********************" );
    return (sum/**/ == result/**/);
  }

  def printNumber /* printNumber#21 */ ( theLength /* theLength#18 */ : Int, number /* number#19 */ : Int, initString /* initString#20 */ : String ) : Int = {
    var lineToPrint /* lineToPrint#15 */ /* lineToPrint#15 */ : String;
    var i /* i#16 */ /* i#16 */ : Int;
    var numberLength /* numberLength#17 */ /* numberLength#17 */ : Int;
    i/**/ = 0;
    numberLength/**/ = this/**/.getNumberOfDigits/**/ ( number/**/ );
    lineToPrint/**/ = initString/**/;
    while ( (i/**/ < (theLength/**/ - numberLength/**/)) )
      {
        lineToPrint/**/ = (lineToPrint/**/ + " ");
        i/**/ = (i/**/ + 1);
      }
    println( (lineToPrint/**/ + number/**/) );
    return 0;
  }

  def printLine /* printLine#25 */ ( theLength /* theLength#24 */ : Int ) : Int = {
    var i /* i#22 */ /* i#22 */ : Int;
    var lineToPrint /* lineToPrint#23 */ /* lineToPrint#23 */ : String;
    i/**/ = 0;
    lineToPrint/**/ = "-";
    while ( (i/**/ < theLength/**/) )
      {
        lineToPrint/**/ = (lineToPrint/**/ + "-");
        i/**/ = (i/**/ + 1);
      }
    println( lineToPrint/**/ );
    return 0;
  }

  def remainder /* remainder#30 */ ( number /* number#28 */ : Int, divider /* divider#29 */ : Int ) : Int = {
    var result /* result#26 */ /* result#26 */ : Int;
    var realNew /* realNew#27 */ /* realNew#27 */ : Int;
    result/**/ = (number/**/ / divider/**/);
    realNew/**/ = (result/**/ * divider/**/);
    if ( (number/**/ < realNew/**/) )
      {
        result/**/ = (result/**/ - 1);
        realNew/**/ = (result/**/ * divider/**/);
      }
    return (number/**/ - realNew/**/);
  }

  def separateFactor /* separateFactor#35 */ ( factor /* factor#34 */ : Int ) : Int[ ] = {
    var rest /* rest#31 */ /* rest#31 */ : Int;
    var factorParts /* factorParts#32 */ /* factorParts#32 */ : Int[ ];
    var counter /* counter#33 */ /* counter#33 */ : Int;
    counter/**/ = 0;
    factorParts/**/ = new Int [ this/**/.getNumberOfDigits/**/ ( factor/**/ ) ];
    while ( (9 < factor/**/) )
      {
        rest/**/ = this/**/.remainder/**/ ( factor/**/, 10 );
        factor/**/ = ((factor/**/ - rest/**/) / 10);
        factorParts/**/[ counter/**/ ] = rest/**/;
        counter/**/ = (counter/**/ + 1);
      }
    factorParts/**/[ counter/**/ ] = factor/**/;
    return factorParts/**/;
  }

  def getNumberOfDigits /* getNumberOfDigits#37 */ ( number /* number#36 */ : Int ) : Int = {
    return this/**/.countDigits/**/ ( number/**/, 10, 1 );
  }

  def countDigits /* countDigits#42 */ ( number /* number#39 */ : Int, value /* value#40 */ : Int, counter /* counter#41 */ : Int ) : Int = {
    var returnValue /* returnValue#38 */ /* returnValue#38 */ : Int;
    if ( (number/**/ < value/**/) )
      {
        returnValue/**/ = counter/**/;
      }
    else
      {
        returnValue/**/ = this/**/.countDigits/**/ ( number/**/, (10 * value/**/), (counter/**/ + 1) );
      }
    return returnValue/**/;
  }
}
