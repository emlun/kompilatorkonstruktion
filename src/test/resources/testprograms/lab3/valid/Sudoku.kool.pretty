object Sudoku /* Sudoku#0 */ {
  def main() : Unit = {
    println( new SudokuGrid/**/().init/**/ (  ).test1/**/ (  ) );
  }
}

class SudokuGrid /* SudokuGrid#5 */ {
  var grid_ /* grid_#1 */ /* grid_#1 */ : Int[ ];
  var currentLine_ /* currentLine_#2 */ /* currentLine_#2 */ : Int;
  var currentColumn_ /* currentColumn_#3 */ /* currentColumn_#3 */ : Int;
  var garbage_ /* garbage_#4 */ /* garbage_#4 */ : Bool;
  def init /* init#7 */ (  ) : SudokuGrid/**/ = {
    var i /* i#6 */ /* i#6 */ : Int;
    grid_/**/ = new Int [ 81 ];
    currentLine_/**/ = 0;
    currentColumn_/**/ = 0;
    i/**/ = 0;
    while ( (i/**/ < grid_/**/.length) )
      {
        grid_/**/[ i/**/ ] = 0;
        i/**/ = (i/**/ + 1);
      }
    return this/**/;
  }

  def test1 /* test1#8 */ (  ) : String = {
    garbage_/**/ = this/**/.set/**/ ( 0, 0, 1 );
    garbage_/**/ = this/**/.set/**/ ( 0, 5, 7 );
    garbage_/**/ = this/**/.set/**/ ( 0, 7, 9 );
    garbage_/**/ = this/**/.set/**/ ( 1, 1, 3 );
    garbage_/**/ = this/**/.set/**/ ( 1, 4, 2 );
    garbage_/**/ = this/**/.set/**/ ( 1, 8, 8 );
    garbage_/**/ = this/**/.set/**/ ( 2, 2, 9 );
    garbage_/**/ = this/**/.set/**/ ( 2, 3, 6 );
    garbage_/**/ = this/**/.set/**/ ( 2, 6, 5 );
    garbage_/**/ = this/**/.set/**/ ( 3, 2, 5 );
    garbage_/**/ = this/**/.set/**/ ( 3, 3, 3 );
    garbage_/**/ = this/**/.set/**/ ( 3, 6, 9 );
    garbage_/**/ = this/**/.set/**/ ( 4, 1, 1 );
    garbage_/**/ = this/**/.set/**/ ( 4, 4, 8 );
    garbage_/**/ = this/**/.set/**/ ( 4, 8, 2 );
    garbage_/**/ = this/**/.set/**/ ( 5, 0, 6 );
    garbage_/**/ = this/**/.set/**/ ( 5, 5, 4 );
    garbage_/**/ = this/**/.set/**/ ( 6, 0, 3 );
    garbage_/**/ = this/**/.set/**/ ( 6, 7, 1 );
    garbage_/**/ = this/**/.set/**/ ( 7, 1, 4 );
    garbage_/**/ = this/**/.set/**/ ( 7, 8, 7 );
    garbage_/**/ = this/**/.set/**/ ( 8, 2, 7 );
    garbage_/**/ = this/**/.set/**/ ( 8, 6, 3 );
    println( "~~~~ Original sudoku ~~~~" );
    garbage_/**/ = this/**/.display/**/ (  );
    println( "Solving sudoku..." );
    if ( this/**/.solve/**/ (  ) )
      {
        println( "~~~~~ Solved sudoku ~~~~~" );
        garbage_/**/ = this/**/.display/**/ (  );
      }
    else
      {
        println( "Couldn't solve this sudoku :-(" );
      }
    return "";
  }

  def set /* set#12 */ ( line /* line#9 */ : Int, column /* column#10 */ : Int, value /* value#11 */ : Int ) : Bool = {
    grid_/**/[ ((line/**/ * 9) + column/**/) ] = value/**/;
    return true;
  }

  def get /* get#15 */ ( line /* line#13 */ : Int, column /* column#14 */ : Int ) : Int = {
    return grid_/**/ [ ((line/**/ * 9) + column/**/) ];
  }

  def solve /* solve#20 */ (  ) : Bool = {
    var line /* line#16 */ /* line#16 */ : Int;
    var column /* column#17 */ /* column#17 */ : Int;
    var value /* value#18 */ /* value#18 */ : Int;
    var result /* result#19 */ /* result#19 */ : Bool;
    if ( !this/**/.findNextUnset/**/ (  ) )
      result/**/ = true;
    else
      result/**/ = false;
    line/**/ = currentLine_/**/;
    column/**/ = currentColumn_/**/;
    value/**/ = 1;
    while ( ((value/**/ < 10) && (result/**/ == false)) )
      {
        if ( this/**/.isCompatible/**/ ( line/**/, column/**/, value/**/ ) )
          {
            garbage_/**/ = this/**/.set/**/ ( line/**/, column/**/, value/**/ );
            if ( this/**/.solve/**/ (  ) )
              {
                result/**/ = true;
              }
            else
              {
                garbage_/**/ = this/**/.set/**/ ( line/**/, column/**/, 0 );
                currentLine_/**/ = line/**/;
                currentColumn_/**/ = column/**/;
              }
          }
        value/**/ = (value/**/ + 1);
      }
    return result/**/;
  }

  def findNextUnset /* findNextUnset#22 */ (  ) : Bool = {
    var result /* result#21 */ /* result#21 */ : Bool;
    result/**/ = false;
    while ( ((currentLine_/**/ < 9) && (result/**/ == false)) )
      {
        while ( ((currentColumn_/**/ < 9) && (result/**/ == false)) )
          {
            if ( this/**/.isSet/**/ ( currentLine_/**/, currentColumn_/**/ ) )
              currentColumn_/**/ = (currentColumn_/**/ + 1);
            else
              result/**/ = true;
          }
        if ( (result/**/ == false) )
          {
            currentLine_/**/ = (currentLine_/**/ + 1);
            currentColumn_/**/ = 0;
          }
      }
    return result/**/;
  }

  def isSet /* isSet#25 */ ( line /* line#23 */ : Int, column /* column#24 */ : Int ) : Bool = {
    return ((0 < this/**/.get/**/ ( line/**/, column/**/ )) && (this/**/.get/**/ ( line/**/, column/**/ ) < 10));
  }

  def isCompatible /* isCompatible#29 */ ( line /* line#26 */ : Int, column /* column#27 */ : Int, value /* value#28 */ : Int ) : Bool = {
    return ((!this/**/.appearInLine/**/ ( line/**/, value/**/ ) && !this/**/.appearInColumn/**/ ( column/**/, value/**/ )) && !this/**/.appearInBlock/**/ ( line/**/, column/**/, value/**/ ));
  }

  def appearInLine /* appearInLine#34 */ ( line /* line#32 */ : Int, value /* value#33 */ : Int ) : Bool = {
    var column /* column#30 */ /* column#30 */ : Int;
    var result /* result#31 */ /* result#31 */ : Bool;
    column/**/ = 0;
    result/**/ = false;
    while ( ((column/**/ < 9) && (result/**/ == false)) )
      {
        if ( (this/**/.get/**/ ( line/**/, column/**/ ) == value/**/) )
          result/**/ = true;
        column/**/ = (column/**/ + 1);
      }
    return result/**/;
  }

  def appearInColumn /* appearInColumn#39 */ ( column /* column#37 */ : Int, value /* value#38 */ : Int ) : Bool = {
    var line /* line#35 */ /* line#35 */ : Int;
    var result /* result#36 */ /* result#36 */ : Bool;
    line/**/ = 0;
    result/**/ = false;
    while ( ((line/**/ < 9) && (result/**/ == false)) )
      {
        if ( (this/**/.get/**/ ( line/**/, column/**/ ) == value/**/) )
          result/**/ = true;
        line/**/ = (line/**/ + 1);
      }
    return result/**/;
  }

  def appearInBlock /* appearInBlock#48 */ ( line /* line#45 */ : Int, column /* column#46 */ : Int, value /* value#47 */ : Int ) : Bool = {
    var i /* i#40 */ /* i#40 */ : Int;
    var j /* j#41 */ /* j#41 */ : Int;
    var firstLine /* firstLine#42 */ /* firstLine#42 */ : Int;
    var firstColumn /* firstColumn#43 */ /* firstColumn#43 */ : Int;
    var result /* result#44 */ /* result#44 */ : Bool;
    firstLine/**/ = ((line/**/ / 3) * 3);
    firstColumn/**/ = ((column/**/ / 3) * 3);
    i/**/ = 0;
    result/**/ = false;
    while ( ((i/**/ < 3) && (result/**/ == false)) )
      {
        j/**/ = 0;
        while ( ((j/**/ < 3) && (result/**/ == false)) )
          {
            if ( (this/**/.get/**/ ( (firstLine/**/ + i/**/), (firstColumn/**/ + j/**/) ) == value/**/) )
              result/**/ = true;
            j/**/ = (j/**/ + 1);
          }
        i/**/ = (i/**/ + 1);
      }
    return result/**/;
  }

  def display /* display#51 */ (  ) : Bool = {
    var i /* i#49 */ /* i#49 */ : Int;
    var separator /* separator#50 */ /* separator#50 */ : String;
    i/**/ = 0;
    separator/**/ = "+-------+-------+-------+";
    while ( (i/**/ < 9) )
      {
        if ( (this/**/.mod/**/ ( i/**/, 3 ) == 0) )
          println( separator/**/ );
        println( this/**/.lineDisplay/**/ ( i/**/ ) );
        i/**/ = (i/**/ + 1);
      }
    println( separator/**/ );
    return true;
  }

  def lineDisplay /* lineDisplay#55 */ ( line /* line#54 */ : Int ) : String = {
    var column /* column#52 */ /* column#52 */ : Int;
    var result /* result#53 */ /* result#53 */ : String;
    column/**/ = 0;
    result/**/ = "";
    while ( (column/**/ < 9) )
      {
        if ( (this/**/.mod/**/ ( column/**/, 3 ) == 0) )
          result/**/ = (result/**/ + "| ");
        if ( this/**/.isSet/**/ ( line/**/, column/**/ ) )
          result/**/ = ((result/**/ + this/**/.get/**/ ( line/**/, column/**/ )) + " ");
        else
          result/**/ = (result/**/ + "  ");
        column/**/ = (column/**/ + 1);
      }
    return (result/**/ + "|");
  }

  def mod /* mod#58 */ ( i /* i#56 */ : Int, j /* j#57 */ : Int ) : Int = {
    return (i/**/ - ((i/**/ / j/**/) * j/**/));
  }
}
