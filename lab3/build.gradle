plugins {
  id "com.github.maiflai.scalatest" version "0.6-5-g9065d91"
}
apply plugin: 'scala'
apply plugin: 'eclipse'

task wrapper(type: Wrapper) {
  gradleVersion = '2.2'
}

repositories {
  mavenCentral()
}

dependencies {
  compile(
    'org.scala-lang:scala-library:2.+',
    'org.scala-lang:scala-parser-combinators:2.+',
  )
  testCompile 'org.scalatest:scalatest_2.11:2.+'
  testRuntime 'org.pegdown:pegdown:1.+'
}

tasks.withType(ScalaCompile) {
  scalaCompileOptions.useAnt = false
  scalaCompileOptions.additionalParameters = ['-feature']
}

task runLexer(type: JavaExec) {
  classpath sourceSets.main.runtimeClasspath
  executable 'scala'
  main 'koolc.Main'
  args 'src/test/resources/koolc/lexer/bad.kool', '--tokens'
}

task runParser(type: JavaExec) {
  classpath sourceSets.main.runtimeClasspath
  executable 'scala'
  main 'koolc.Main'
  args 'src/test/resources/helloworld.kool'
}

task runRef(type: JavaExec) {
  classpath fileTree('lib')
  executable 'scala'
  main 'koolc.Main'
}

task makePrettyPrinterSnapshots(type: Copy) {
  from("${buildDir}/tmp") {
    include '**/*.kool.pretty'
  }
  into 'src/test/resources'
}

fileTree('src/test/resources/') {
  include '**/*.kool'
  exclude '**/invalid/**'
}.visit { f ->
  if(!f.isDirectory()) {
    def t = task("makePrettyPrinterSnapshot${f.name.replace('.kool', '').capitalize()}", type: JavaExec) {
      classpath sourceSets.main.runtimeClasspath
      executable 'scala'
      main 'koolc.Main'
      args "src/test/resources/${f.relativePath}"

      def outputFile = file("${buildDir}/tmp/${f.relativePath}.pretty")
      outputFile.parentFile.mkdirs()
      standardOutput = new FileOutputStream(outputFile)
    }
    makePrettyPrinterSnapshots.dependsOn t
  }
}
