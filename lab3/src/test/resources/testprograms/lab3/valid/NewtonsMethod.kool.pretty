object NewtonsMethod {
  def main() : Unit = {
    println( ("Final result: " + new NM().sqrt ( 2 ).toString (  )) );
  }
}

class NM {
  def sqrt ( n : Int ) : Real = {
    var guess : Real;
    var orig : Real;
    var result : Real;
    guess = new Real().init ( 1, 4 );
    orig = new Real().init ( n, 4 );
    result = this.sqrtIter ( guess, 0, 5, orig );
    return result;
  }
  def sqrtIter ( guess : Real, i : Int, maxIter : Int, original : Real ) : Real = {
    var average : Real;
    var quotient : Real;
    var result : Real;
    if ( (i == maxIter) )
      {
        result = guess;
      }
    else 
      {
        println( ((("Iteration " + i) + ": Guess is ") + guess.toString (  )) );
        quotient = original.divide ( guess );
        average = guess.plus ( quotient ).divide ( new Real().init ( 2, 4 ) );
        result = this.sqrtIter ( average, (i + 1), maxIter, original );
      }
    return result;
  }
}

class Real {
  var integerPart : Int;
  var digits : Int[ ];
  var util : Util;
  def init ( intPart : Int, digitsCount : Int ) : Real = {
    var i : Int;
    util = new Util();
    integerPart = intPart;
    digits = new Int [ digitsCount ] ;
    i = 0;
    while ( (i < digitsCount) )
      {
        digits[ i ] = 0;
        i = (i + 1);
      }
    return this;
  }
  def getDigits (  ) : Int[ ] = {
    return digits;
  }
  def getIntegerPart (  ) : Int = {
    return integerPart;
  }
  def setIntegerPart ( p : Int ) : Real = {
    integerPart = p;
    return this;
  }
  def divide ( other : Real ) : Real = {
    var i : Int;
    var int1 : Int;
    var int2 : Int;
    var len : Int;
    var otherDigits : Int[ ];
    var f : Frac;
    var result : Real;
    if ( (digits.length < other.getDigits (  ).length) )
      {
        len = digits.length;
      }
    else 
      {
        len = other.getDigits (  ).length;
      }
    int1 = this.getIntegerPart (  );
    int2 = other.getIntegerPart (  );
    i = 0;
    otherDigits = other.getDigits (  );
    while ( (i < len) )
      {
        int1 = ((int1 * 10) + digits [ i ]);
        int2 = ((int2 * 10) + otherDigits [ i ]);
        i = (i + 1);
      }
    f = new Frac().init ( int1, int2 );
    result = new Real().init ( 3, 4 ).evalFrac ( f );
    return result;
  }
  def evalFrac ( frac : Frac ) : Real = {
    var leftover : Int;
    var i : Int;
    var den : Int;
    den = frac.getDenominator (  );
    integerPart = (frac.getNumerator (  ) / den);
    if ( !frac.isPos (  ) )
      {
        integerPart = (0 - integerPart);
      }
    leftover = util.mod ( frac.getNumerator (  ), den );
    i = 0;
    while ( (i < digits.length) )
      {
        leftover = (10 * leftover);
        digits[ i ] = (leftover / den);
        leftover = util.mod ( leftover, den );
        i = (i + 1);
      }
    return this;
  }
  def plus ( other : Real ) : Real = {
    var len : Int;
    var od : Int[ ];
    var resDig : Int[ ];
    var carry : Int;
    var i : Int;
    var sum : Int;
    var result : Real;
    od = other.getDigits (  );
    if ( (digits.length < od.length) )
      {
        len = digits.length;
      }
    else 
      {
        len = od.length;
      }
    result = new Real().init ( 0, len );
    resDig = result.getDigits (  );
    carry = 0;
    i = (len - 1);
    while ( !(i < 0) )
      {
        sum = ((digits [ i ] + od [ i ]) + carry);
        carry = (sum / 10);
        resDig[ i ] = util.mod ( sum, 10 );
        i = (i - 1);
      }
    return result.setIntegerPart ( ((integerPart + other.getIntegerPart (  )) + carry) );
  }
  def toString (  ) : String = {
    var ret : String;
    var i : Int;
    ret = (("" + integerPart) + ".");
    i = 0;
    while ( (i < digits.length) )
      {
        ret = (ret + digits [ i ]);
        i = (i + 1);
      }
    return ret;
  }
}

class Frac {
  var numerator : Int;
  var denominator : Int;
  var sign : Bool;
  var util : Util;
  def init ( n : Int, d : Int ) : Frac = {
    util = new Util();
    numerator = util.abs ( n );
    denominator = util.abs ( d );
    sign = (((n < 0) && (d < 0)) || (((0 < n) || (n == 0)) && ((0 < d) || (d == 0))));
    return this.simplify (  );
  }
  def getNumerator (  ) : Int = {
    return numerator;
  }
  def getDenominator (  ) : Int = {
    return denominator;
  }
  def setPos ( positive : Bool ) : Frac = {
    sign = positive;
    return this;
  }
  def isPos (  ) : Bool = {
    return sign;
  }
  def simplify (  ) : Frac = {
    var gcd_ : Int;
    if ( (!(numerator == 0) && !(denominator == 0)) )
      {
        gcd_ = util.gcd ( numerator, denominator );
        if ( !(gcd_ == 1) )
          {
            numerator = (numerator / gcd_);
            denominator = (denominator / gcd_);
          }
      }
    return this;
  }
  def plus ( other : Frac ) : Frac = {
    var lcm : Int;
    var lfac : Int;
    var rfac : Int;
    lcm = util.lcm ( denominator, other.getDenominator (  ) );
    lfac = (lcm / denominator);
    if ( !sign )
      {
        lfac = (0 - lfac);
      }
    rfac = (lcm / other.getDenominator (  ));
    if ( !other.isPos (  ) )
      {
        rfac = (0 - rfac);
      }
    return new Frac().init ( ((lfac * numerator) + (rfac * other.getNumerator (  ))), lcm );
  }
  def minus ( other : Frac ) : Frac = {
    return this.plus ( other.negative (  ) );
  }
  def times ( other : Frac ) : Frac = {
    return new Frac().init ( (numerator * other.getNumerator (  )), (denominator * other.getDenominator (  )) ).simplify (  ).setPos ( ((this.isPos (  ) && other.isPos (  )) || (!this.isPos (  ) && !other.isPos (  ))) );
  }
  def divided ( other : Frac ) : Frac = {
    return this.times ( other.inverse (  ) );
  }
  def inverse (  ) : Frac = {
    return new Frac().init ( denominator, numerator );
  }
  def negative (  ) : Frac = {
    return new Frac().init ( numerator, denominator ).setPos ( false );
  }
  def toString (  ) : String = {
    var result : String;
    if ( sign )
      {
        result = "";
      }
    else 
      {
        result = "-";
      }
    return (((result + numerator) + "/") + denominator);
  }
}

class Util {
  def abs ( v : Int ) : Int = {
    var res : Int;
    if ( !(v < 0) )
      {
        res = v;
      }
    else 
      {
        res = (0 - v);
      }
    return res;
  }
  def gcd ( m_ : Int, n_ : Int ) : Int = {
    var t : Int;
    var r : Int;
    var result : Int;
    var m : Int;
    var n : Int;
    m = this.abs ( m_ );
    n = this.abs ( n_ );
    if ( (m < n) )
      {
        t = m;
        m = n;
        n = t;
      }
    r = this.mod ( m, n );
    if ( (r == 0) )
      {
        result = n;
      }
    else 
      {
        result = this.gcd ( n, r );
      }
    return result;
  }
  def lcm ( m : Int, n : Int ) : Int = {
    return ((n * m) / this.gcd ( n, m ));
  }
  def mod ( m : Int, n : Int ) : Int = {
    return (m - (n * (m / n)));
  }
}

